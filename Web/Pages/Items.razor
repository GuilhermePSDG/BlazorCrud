@inject ItemsClient itemsClient
@page "/"

<h3 id="items-title">Items
<span @onclick="add" id="add-item-icon" class="material-symbols-outlined"> add </span>
</h3>


<ItemsTable 
    onEditItemCliked="async (item) => await edit(item)"
    items="@items"></ItemsTable>
<ModalBody @ref="modal">
    <ModalHeader>
        <p>@MessageHader</p>
    </ModalHeader>
    <ModalContent>
        <ItemsForm 
            onItemChanged="AddOrUpdateItem"
            onNewItem="AddOrUpdateItem"
            ShowControls="@false" 
            @ref="itemForm"
        ></ItemsForm>
    </ModalContent>
    <ModalBottom>
        <button @onclick="modal.Close">Fechar</button>
        <button @onclick="itemForm.Act"> Salvar</button>
    </ModalBottom>
</ModalBody>


@code
{
    Task add()
    {
        modal.Show(); 
        MessageHader = "Adicionar item.";
        return Task.CompletedTask;
    }
    Task edit(Item item)
    {
        modal.Show(() =>
        {
            itemForm.StartEdit(item);
            return Task.CompletedTask;
        });
        this.MessageHader = "Editar item.";
        return Task.CompletedTask;
    }

    public string MessageHader = "";
    public ModalBody modal;
    public ItemsForm itemForm;
    bool IsEdting = true;
    List<Item> items = new List<Item>();
    protected override async Task OnInitializedAsync()
    {
        this.items = await itemsClient.GetAllAsync();
        await base.OnInitializedAsync();
    }
    public void AddOrUpdateItem(Item nitem)
    {
        var i= items.FindIndex(x => x.id == nitem.id);
        if(i == -1)
            this.items.Add(nitem);
        else
            this.items[i] = nitem;
        modal.Close();
    }
}
